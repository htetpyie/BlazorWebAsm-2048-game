@page "/"

<div class="game-container" tabindex="0" autofocus @onkeyup=Play>

    <div class="scoreContainer">
        <div class="header">2048 GAME</div>
        <div id="score-contents">
            <div class="score-content">
                <span class="scoreTitle">Target</span>
                <span class="score" id="targetScore">@TargetScore</span>
            </div>
            <div class="score-content">
                <span class="scoreTitle">Score</span>
                <span id="score" class="score">@Score</span>
            </div>
        </div>

    </div>

    <div class="grid">
        @foreach (var item in Squares)
        {
            <div>@(item != 0 ? item : "")</div>
        }
    </div>
</div>

@code {
    public int GridSize { get; set; } = 4;
    public int TargetScore = 1024;

    private List<int> Squares { get; set; } = new();

    private int SquareSize { get => GridSize * GridSize; }
    private int Score { get; set; } = 0;

    private bool IsWin { get; set; }
    private bool IsLoose { get; set; }

    private enum EnumArrowKeys
    {
        ArrowUp, ArrowDown, ArrowLeft, ArrowRight
    };

    protected override void OnInitialized()
    {
        try
        {
            CreateBoard();
        }
        catch (Exception e)
        {
            throw;
        }
    }

    private void CreateBoard()
    {
        foreach (var item in Enumerable.Range(1, SquareSize))
            Squares.Add(0);

        GenerateTwo();
        GenerateTwo();
    }

    private void GenerateTwo()
    {
        var random = new Random().Next(SquareSize);
        if (Squares[random] == 0)
        {
            Squares[random] = 2;
            CheckLose();
        }
        else GenerateTwo();
    }

    private void Play(KeyboardEventArgs e)
    {
        if (e.Key == EnumArrowKeys.ArrowLeft.ToString())
        {
            Console.WriteLine("Left");
        }
        else if (e.Key == EnumArrowKeys.ArrowRight.ToString())
        {
            Console.WriteLine("Right");
            MoveRight();
        }
        else if (e.Key == EnumArrowKeys.ArrowDown.ToString())
        {
            Console.WriteLine("ArrowDown");

        }
        else if (e.Key == EnumArrowKeys.ArrowUp.ToString())
        {
            Console.WriteLine("Up");
        }
    }

    private void MoveRight()
    {
        var resultList = new List<int>();
        for (int gridIndex = 0; gridIndex < Squares.Count; gridIndex++)
        {
            var row = new List<int>();
            if (gridIndex % GridSize == 0)
            {
                for (int i = 0; i < GridSize; i++)
                {
                    row.Add(Squares[gridIndex + i]);
                }
            }

            var filteredRow = row.Where(x => x != 0).ToList();
            var zeroCount = row.Count(x => x == 0);
            var zeroList = Enumerable.Repeat(0, zeroCount).ToList();

            zeroList.AddRange(filteredRow);

            resultList.AddRange(zeroList);
        }

        Squares = resultList;

        Console.WriteLine(Squares.ToString());
    }


    private void CheckLose()
    {
        IsLoose = !Squares.Any(x => x == 0);
    }

    private void CheckWin()
    {
        IsWin = Squares.Any(x => x >= TargetScore);
    }

}
